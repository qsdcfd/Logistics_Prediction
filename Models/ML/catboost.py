{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "catboost",
      "provenance": [],
      "authorship_tag": "ABX9TyN9E67uF14t6nSkS89kJP++"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "rFIslvRw5GHM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3619b40e-9fcd-4b2a-c873-b2785c69f648"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: catboost in /usr/local/lib/python3.7/dist-packages (1.0.6)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (5.5.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.19.1)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.5.4)\n",
            "Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.0.5)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n",
            "Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2022.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.4.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.11.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (3.0.9)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->catboost) (4.2.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (8.0.1)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: optuna in /usr/local/lib/python3.7/dist-packages (2.10.0)\n",
            "Requirement already satisfied: cmaes>=0.8.2 in /usr/local/lib/python3.7/dist-packages (from optuna) (0.8.2)\n",
            "Requirement already satisfied: scipy!=1.4.0 in /usr/local/lib/python3.7/dist-packages (from optuna) (1.5.4)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from optuna) (1.19.1)\n",
            "Requirement already satisfied: sqlalchemy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from optuna) (1.4.36)\n",
            "Requirement already satisfied: colorlog in /usr/local/lib/python3.7/dist-packages (from optuna) (6.6.0)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.7/dist-packages (from optuna) (5.3.1)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from optuna) (4.56.0)\n",
            "Requirement already satisfied: alembic in /usr/local/lib/python3.7/dist-packages (from optuna) (1.8.0)\n",
            "Requirement already satisfied: cliff in /usr/local/lib/python3.7/dist-packages (from optuna) (3.10.1)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from optuna) (21.3)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->optuna) (3.0.9)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from sqlalchemy>=1.1.0->optuna) (4.11.4)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.7/dist-packages (from sqlalchemy>=1.1.0->optuna) (1.1.2)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.7/dist-packages (from alembic->optuna) (1.2.0)\n",
            "Requirement already satisfied: importlib-resources in /usr/local/lib/python3.7/dist-packages (from alembic->optuna) (5.7.1)\n",
            "Requirement already satisfied: pbr!=2.1.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from cliff->optuna) (5.9.0)\n",
            "Requirement already satisfied: stevedore>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from cliff->optuna) (3.5.0)\n",
            "Requirement already satisfied: PrettyTable>=0.7.2 in /usr/local/lib/python3.7/dist-packages (from cliff->optuna) (3.3.0)\n",
            "Requirement already satisfied: autopage>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from cliff->optuna) (0.5.1)\n",
            "Requirement already satisfied: cmd2>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from cliff->optuna) (2.4.1)\n",
            "Requirement already satisfied: wcwidth>=0.1.7 in /usr/local/lib/python3.7/dist-packages (from cmd2>=1.0.0->cliff->optuna) (0.2.5)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from cmd2>=1.0.0->cliff->optuna) (4.2.0)\n",
            "Requirement already satisfied: attrs>=16.3.0 in /usr/local/lib/python3.7/dist-packages (from cmd2>=1.0.0->cliff->optuna) (21.4.0)\n",
            "Requirement already satisfied: pyperclip>=1.6 in /usr/local/lib/python3.7/dist-packages (from cmd2>=1.0.0->cliff->optuna) (1.8.2)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->sqlalchemy>=1.1.0->optuna) (3.8.0)\n",
            "Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.7/dist-packages (from Mako->alembic->optuna) (2.0.1)\n"
          ]
        }
      ],
      "source": [
        "!pip install catboost\n",
        "!pip install optuna"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from catboost import CatBoostRegressor\n",
        "\n",
        "from tqdm import tqdm\n",
        "from sklearn.model_selection import StratifiedKFold,train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "import random\n",
        "import optuna\n",
        "from optuna.samplers import TPESampler"
      ],
      "metadata": {
        "id": "-KJ6YkpY5OF7"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train = pd.read_csv('/content/cat_train.csv')\n",
        "test = pd.read_csv('/content/cat_test.csv')"
      ],
      "metadata": {
        "id": "GZCF_Eqj9RJe"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def reduce_mem_usage(df):\n",
        "    \"\"\" iterate through all the columns of a dataframe and modify the data type\n",
        "        to reduce memory usage.        \n",
        "    \"\"\"\n",
        "    start_mem = df.memory_usage().sum() / 1024**2\n",
        "    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n",
        "\n",
        "    for col in df.columns:\n",
        "        col_type = df[col].dtype\n",
        "\n",
        "        if col_type != object:\n",
        "            c_min = df[col].min()\n",
        "            c_max = df[col].max()\n",
        "            if str(col_type)[:3] == 'int':\n",
        "                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n",
        "                    df[col] = df[col].astype(np.int8)\n",
        "                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n",
        "                    df[col] = df[col].astype(np.int16)\n",
        "                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n",
        "                    df[col] = df[col].astype(np.int32)\n",
        "                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n",
        "                    df[col] = df[col].astype(np.int64)  \n",
        "            else:\n",
        "                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n",
        "                    df[col] = df[col].astype(np.float16)\n",
        "                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n",
        "                    df[col] = df[col].astype(np.float32)\n",
        "                else:\n",
        "                    df[col] = df[col].astype(np.float64)\n",
        "\n",
        "    end_mem = df.memory_usage().sum() / 1024**2\n",
        "    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n",
        "    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n",
        "\n",
        "    return df"
      ],
      "metadata": {
        "id": "TBr9leFOAPXc"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reduce_mem_usage(train)\n",
        "train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 786
        },
        "id": "Z00BDWRoAWXf",
        "outputId": "d8b581b2-d684-45bd-ba00-f80bc726838c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Memory usage of dataframe is 5.32 MB\n",
            "Memory usage after optimization is: 0.91 MB\n",
            "Decreased by 83.0%\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          item  counts  Rec1  Rec2  Rec3  Rec4  Rec5  Rec6  Rec7  Rec8  ...  \\\n",
              "0           음반       3     2     8     7     1     0     0     0     1  ...   \n",
              "1        문화컨텐츠       3     5     0     1     1     0     0     0     2  ...   \n",
              "2          농산물       3     1     1     2     0     0     0     0     0  ...   \n",
              "3         기타식품       7     5     0     1     1     0     0     0     5  ...   \n",
              "4          농산물       3     2     8     2     3     7     0     0     0  ...   \n",
              "...        ...     ...   ...   ...   ...   ...   ...   ...   ...   ...  ...   \n",
              "31679    스포츠잡화       3     5     0     1     1     0     0     0     2  ...   \n",
              "31680  스마트디바이스       4     5     0     1     1     0     0     0     3  ...   \n",
              "31681  스마트디바이스       6     5     0     1     1     0     0     0     2  ...   \n",
              "31682       지갑       7     5     0     1     1     0     0     0     2  ...   \n",
              "31683     세탁용품       4     5     0     1     1     0     0     0     5  ...   \n",
              "\n",
              "       Rec11  Rec12  Rec13  Rec14  Rec15  Rec16  Send_1~5  Send_6~9  Send_10  \\\n",
              "0          0      6      9      3      0      0         7        14        5   \n",
              "1          0      2      4      4      0      0        17        15        0   \n",
              "2          0      0      5      4      0      0         7         7        8   \n",
              "3          0      1      9      4      0      0        15         4        8   \n",
              "4          0      7      6      3      0      0         7         7        8   \n",
              "...      ...    ...    ...    ...    ...    ...       ...       ...      ...   \n",
              "31679      0      7      3      2      0      0        16        11        0   \n",
              "31680      0      8      7      1      0      0        13         1        4   \n",
              "31681      0      6      5      2      0      0        13         1        4   \n",
              "31682      0      6      1      2      0      0        17         6        5   \n",
              "31683      0      7      0      1      0      0        12         4        9   \n",
              "\n",
              "       Send_11~16  \n",
              "0              11  \n",
              "1              10  \n",
              "2              18  \n",
              "3              10  \n",
              "4              18  \n",
              "...           ...  \n",
              "31679          17  \n",
              "31680          12  \n",
              "31681          12  \n",
              "31682          11  \n",
              "31683          14  \n",
              "\n",
              "[31684 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3507004d-dd98-48e4-af6a-242a1c75fefd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item</th>\n",
              "      <th>counts</th>\n",
              "      <th>Rec1</th>\n",
              "      <th>Rec2</th>\n",
              "      <th>Rec3</th>\n",
              "      <th>Rec4</th>\n",
              "      <th>Rec5</th>\n",
              "      <th>Rec6</th>\n",
              "      <th>Rec7</th>\n",
              "      <th>Rec8</th>\n",
              "      <th>...</th>\n",
              "      <th>Rec11</th>\n",
              "      <th>Rec12</th>\n",
              "      <th>Rec13</th>\n",
              "      <th>Rec14</th>\n",
              "      <th>Rec15</th>\n",
              "      <th>Rec16</th>\n",
              "      <th>Send_1~5</th>\n",
              "      <th>Send_6~9</th>\n",
              "      <th>Send_10</th>\n",
              "      <th>Send_11~16</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>음반</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>14</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>문화컨텐츠</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>농산물</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>기타식품</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>농산물</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31679</th>\n",
              "      <td>스포츠잡화</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31680</th>\n",
              "      <td>스마트디바이스</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31681</th>\n",
              "      <td>스마트디바이스</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31682</th>\n",
              "      <td>지갑</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31683</th>\n",
              "      <td>세탁용품</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>31684 rows × 22 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3507004d-dd98-48e4-af6a-242a1c75fefd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3507004d-dd98-48e4-af6a-242a1c75fefd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3507004d-dd98-48e4-af6a-242a1c75fefd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reduce_mem_usage(test)\n",
        "test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 838
        },
        "id": "w45fENngkz7_",
        "outputId": "ef3782dc-c4f7-4ce1-b6ac-52b0f6f6417d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Memory usage of dataframe is 1.27 MB\n",
            "Memory usage after optimization is: 0.21 MB\n",
            "Decreased by 83.3%\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             item  Rec1  Rec2  Rec3  Rec4  Rec5  Rec6  Rec7  Rec8  Rec9  ...  \\\n",
              "0             선케어     5     0     1     1     0     0     0     4     3  ...   \n",
              "1          구강위생용품     5     0     1     1     0     0     0     1     7  ...   \n",
              "2              캠핑     5     0     1     1     0     0     0     3     6  ...   \n",
              "3          아웃도어가구     2     8     2     6     0     0     0     0     8  ...   \n",
              "4     분유/이유식/아기간식     5     0     1     1     0     0     0     1     6  ...   \n",
              "...           ...   ...   ...   ...   ...   ...   ...   ...   ...   ...  ...   \n",
              "7915          농산물     4     6     2     3     0     0     0     4     1  ...   \n",
              "7916        문화컨텐츠     5     0     1     1     0     0     0     2     6  ...   \n",
              "7917          농산물     1     1     4     7     0     0     0     0     1  ...   \n",
              "7918          농산물     3     1     1     7     0     0     0     0     3  ...   \n",
              "7919        문화컨텐츠     5     0     1     1     0     0     0     3     7  ...   \n",
              "\n",
              "      Rec11  Rec12  Rec13  Rec14  Rec15  Rec16  Send_1~5  Send_6~9  Send_10  \\\n",
              "0         0      1      4      1      0      0        18        12        7   \n",
              "1         0      3      4      4      0      0        13         0        9   \n",
              "2         0      9      7      3      0      0         9         9        3   \n",
              "3         0      3      6      4      0      0         7         7        6   \n",
              "4         0      4      4      3      0      0        10         6        1   \n",
              "...     ...    ...    ...    ...    ...    ...       ...       ...      ...   \n",
              "7915      0      3      8      1      0      0         7         8        6   \n",
              "7916      0      5      5      1      0      0        16         0        1   \n",
              "7917      0      9      1      4      0      0         9         7        0   \n",
              "7918      0      2      6      1      0      0         9         7        0   \n",
              "7919      0      8      6      4      0      0        13         1        4   \n",
              "\n",
              "      Send_11~16  \n",
              "0              8  \n",
              "1              5  \n",
              "2             15  \n",
              "3              9  \n",
              "4             13  \n",
              "...          ...  \n",
              "7915           8  \n",
              "7916          20  \n",
              "7917          14  \n",
              "7918          14  \n",
              "7919          16  \n",
              "\n",
              "[7920 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e37be083-7a68-4740-88ac-4e590fc2c879\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item</th>\n",
              "      <th>Rec1</th>\n",
              "      <th>Rec2</th>\n",
              "      <th>Rec3</th>\n",
              "      <th>Rec4</th>\n",
              "      <th>Rec5</th>\n",
              "      <th>Rec6</th>\n",
              "      <th>Rec7</th>\n",
              "      <th>Rec8</th>\n",
              "      <th>Rec9</th>\n",
              "      <th>...</th>\n",
              "      <th>Rec11</th>\n",
              "      <th>Rec12</th>\n",
              "      <th>Rec13</th>\n",
              "      <th>Rec14</th>\n",
              "      <th>Rec15</th>\n",
              "      <th>Rec16</th>\n",
              "      <th>Send_1~5</th>\n",
              "      <th>Send_6~9</th>\n",
              "      <th>Send_10</th>\n",
              "      <th>Send_11~16</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>선케어</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>구강위생용품</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>캠핑</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>아웃도어가구</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>분유/이유식/아기간식</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7915</th>\n",
              "      <td>농산물</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7916</th>\n",
              "      <td>문화컨텐츠</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7917</th>\n",
              "      <td>농산물</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7918</th>\n",
              "      <td>농산물</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7919</th>\n",
              "      <td>문화컨텐츠</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7920 rows × 21 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e37be083-7a68-4740-88ac-4e590fc2c879')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e37be083-7a68-4740-88ac-4e590fc2c879 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e37be083-7a68-4740-88ac-4e590fc2c879');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Optuna용 Train셋\n",
        "X = train.drop(['counts'],axis=1)\n",
        "y = train['counts']\n",
        "X_test = test.copy()"
      ],
      "metadata": {
        "id": "5iqB-YLQ_6c_"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X.head()"
      ],
      "metadata": {
        "id": "aBaOfdKhADMa",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "outputId": "36583528-cacb-4aa8-b8d6-7e5f653c0a6f"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    item  Rec1  Rec2  Rec3  Rec4  Rec5  Rec6  Rec7  Rec8  Rec9  ...  Rec11  \\\n",
              "0     음반     2     8     7     1     0     0     0     1     9  ...      0   \n",
              "1  문화컨텐츠     5     0     1     1     0     0     0     2     6  ...      0   \n",
              "2    농산물     1     1     2     0     0     0     0     0     0  ...      0   \n",
              "3   기타식품     5     0     1     1     0     0     0     5     8  ...      0   \n",
              "4    농산물     2     8     2     3     7     0     0     0     1  ...      0   \n",
              "\n",
              "   Rec12  Rec13  Rec14  Rec15  Rec16  Send_1~5  Send_6~9  Send_10  Send_11~16  \n",
              "0      6      9      3      0      0         7        14        5          11  \n",
              "1      2      4      4      0      0        17        15        0          10  \n",
              "2      0      5      4      0      0         7         7        8          18  \n",
              "3      1      9      4      0      0        15         4        8          10  \n",
              "4      7      6      3      0      0         7         7        8          18  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f96fcdfd-72e9-47c6-93be-b32fd50ae9ba\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item</th>\n",
              "      <th>Rec1</th>\n",
              "      <th>Rec2</th>\n",
              "      <th>Rec3</th>\n",
              "      <th>Rec4</th>\n",
              "      <th>Rec5</th>\n",
              "      <th>Rec6</th>\n",
              "      <th>Rec7</th>\n",
              "      <th>Rec8</th>\n",
              "      <th>Rec9</th>\n",
              "      <th>...</th>\n",
              "      <th>Rec11</th>\n",
              "      <th>Rec12</th>\n",
              "      <th>Rec13</th>\n",
              "      <th>Rec14</th>\n",
              "      <th>Rec15</th>\n",
              "      <th>Rec16</th>\n",
              "      <th>Send_1~5</th>\n",
              "      <th>Send_6~9</th>\n",
              "      <th>Send_10</th>\n",
              "      <th>Send_11~16</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>음반</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>14</td>\n",
              "      <td>5</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>문화컨텐츠</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>농산물</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>기타식품</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>농산물</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f96fcdfd-72e9-47c6-93be-b32fd50ae9ba')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f96fcdfd-72e9-47c6-93be-b32fd50ae9ba button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f96fcdfd-72e9-47c6-93be-b32fd50ae9ba');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y.head()"
      ],
      "metadata": {
        "id": "kgpAvUneAEUx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bbaab7a1-33d0-4938-f7d9-5112309c618a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    3\n",
              "1    3\n",
              "2    3\n",
              "3    7\n",
              "4    3\n",
              "Name: counts, dtype: int16"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "MI8Fpd1cANtd",
        "outputId": "694b7843-78ac-48c3-ab36-a3305448a647"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          item  Rec1  Rec2  Rec3  Rec4  Rec5  Rec6  Rec7  Rec8  Rec9  ...  \\\n",
              "0          선케어     5     0     1     1     0     0     0     4     3  ...   \n",
              "1       구강위생용품     5     0     1     1     0     0     0     1     7  ...   \n",
              "2           캠핑     5     0     1     1     0     0     0     3     6  ...   \n",
              "3       아웃도어가구     2     8     2     6     0     0     0     0     8  ...   \n",
              "4  분유/이유식/아기간식     5     0     1     1     0     0     0     1     6  ...   \n",
              "\n",
              "   Rec11  Rec12  Rec13  Rec14  Rec15  Rec16  Send_1~5  Send_6~9  Send_10  \\\n",
              "0      0      1      4      1      0      0        18        12        7   \n",
              "1      0      3      4      4      0      0        13         0        9   \n",
              "2      0      9      7      3      0      0         9         9        3   \n",
              "3      0      3      6      4      0      0         7         7        6   \n",
              "4      0      4      4      3      0      0        10         6        1   \n",
              "\n",
              "   Send_11~16  \n",
              "0           8  \n",
              "1           5  \n",
              "2          15  \n",
              "3           9  \n",
              "4          13  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4e7ed614-97cb-4bf7-aab5-3897c1b0c6f7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item</th>\n",
              "      <th>Rec1</th>\n",
              "      <th>Rec2</th>\n",
              "      <th>Rec3</th>\n",
              "      <th>Rec4</th>\n",
              "      <th>Rec5</th>\n",
              "      <th>Rec6</th>\n",
              "      <th>Rec7</th>\n",
              "      <th>Rec8</th>\n",
              "      <th>Rec9</th>\n",
              "      <th>...</th>\n",
              "      <th>Rec11</th>\n",
              "      <th>Rec12</th>\n",
              "      <th>Rec13</th>\n",
              "      <th>Rec14</th>\n",
              "      <th>Rec15</th>\n",
              "      <th>Rec16</th>\n",
              "      <th>Send_1~5</th>\n",
              "      <th>Send_6~9</th>\n",
              "      <th>Send_10</th>\n",
              "      <th>Send_11~16</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>선케어</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>12</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>구강위생용품</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>캠핑</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>아웃도어가구</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>분유/이유식/아기간식</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e7ed614-97cb-4bf7-aab5-3897c1b0c6f7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4e7ed614-97cb-4bf7-aab5-3897c1b0c6f7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4e7ed614-97cb-4bf7-aab5-3897c1b0c6f7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.info()"
      ],
      "metadata": {
        "id": "Bl5S34P8Dw5P",
        "outputId": "95d69ac7-de71-4249-bf3c-1898f3d16d22",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 31684 entries, 0 to 31683\n",
            "Data columns (total 22 columns):\n",
            " #   Column      Non-Null Count  Dtype \n",
            "---  ------      --------------  ----- \n",
            " 0   item        31684 non-null  object\n",
            " 1   counts      31684 non-null  int16 \n",
            " 2   Rec1        31684 non-null  int8  \n",
            " 3   Rec2        31684 non-null  int8  \n",
            " 4   Rec3        31684 non-null  int8  \n",
            " 5   Rec4        31684 non-null  int8  \n",
            " 6   Rec5        31684 non-null  int8  \n",
            " 7   Rec6        31684 non-null  int8  \n",
            " 8   Rec7        31684 non-null  int8  \n",
            " 9   Rec8        31684 non-null  int8  \n",
            " 10  Rec9        31684 non-null  int8  \n",
            " 11  Rec10       31684 non-null  int8  \n",
            " 12  Rec11       31684 non-null  int8  \n",
            " 13  Rec12       31684 non-null  int8  \n",
            " 14  Rec13       31684 non-null  int8  \n",
            " 15  Rec14       31684 non-null  int8  \n",
            " 16  Rec15       31684 non-null  int8  \n",
            " 17  Rec16       31684 non-null  int8  \n",
            " 18  Send_1~5    31684 non-null  int8  \n",
            " 19  Send_6~9    31684 non-null  int8  \n",
            " 20  Send_10     31684 non-null  int8  \n",
            " 21  Send_11~16  31684 non-null  int8  \n",
            "dtypes: int16(1), int8(20), object(1)\n",
            "memory usage: 928.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Modeling\n"
      ],
      "metadata": {
        "id": "ljp-veK8ljnM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "- Random Search\n",
        "\n",
        "   - Catboost 최적의 파라미터 사용\n",
        "\n",
        "- Objective 함수\n",
        "\n",
        "   - param에 파라미터 값 넣기\n",
        "   - 구간을 넣으면 랜덤한 값 학습\n",
        "   - rmse값이 반환\n",
        "\n",
        "   - trial반혹횟수\n"
      ],
      "metadata": {
        "id": "At6YO_lblrs4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def objective(trial):\n",
        "   param = {\n",
        "       \"random_state\":42,\n",
        "       'learning_rate' : trial.suggest_loguniform('learning_rate', 0.01, 0.05),\n",
        "       'bagging_temperature' :trial.suggest_loguniform('bagging_temperature', 0.01, 100.00),\n",
        "       \"n_estimators\":trial.suggest_int(\"n_estimators\", 500, 5000),\n",
        "       \"max_depth\":trial.suggest_int(\"max_depth\", 4, 16),\n",
        "       'random_strength' :trial.suggest_int('random_strength', 0, 100),\n",
        "       \"colsample_bylevel\":trial.suggest_float(\"colsample_bylevel\", 0.4, 1.0),\n",
        "       \"l2_leaf_reg\":trial.suggest_float(\"l2_leaf_reg\",1e-8,3e-5),\n",
        "       \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n",
        "       \"max_bin\": trial.suggest_int(\"max_bin\", 200, 500),\n",
        "       'od_type': trial.suggest_categorical('od_type', ['IncToDec', 'Iter']),\n",
        "   }\n",
        "   X_train, X_valid, y_train, y_valid = train_test_split(X,y,test_size=0.2)\n",
        "   cat_features = range(X_test.shape[1])\n",
        "   cat = CatBoostRegressor(**param)\n",
        "   cat.fit(X_train, y_train,\n",
        "           eval_set=[(X_train, y_train), (X_valid,y_valid)],\n",
        "           early_stopping_rounds=35,cat_features=cat_features,\n",
        "           verbose=100)\n",
        "   cat_pred = cat.predict(X_valid)\n",
        "   rmse = np.sqrt(mean_squared_error(y_valid, cat_pred))\n",
        "\n",
        "   return rmse"
      ],
      "metadata": {
        "id": "oEMzQJ3Zlklo"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sampler = TPESampler(seed=42)\n",
        "study = optuna.create_study(\n",
        "     study_name = 'cat_parameter_opt',\n",
        "     direction = 'minimize',\n",
        "     sampler = sampler,\n",
        " )\n",
        "\n",
        "study.optimize(objective, n_trials=10)\n",
        "print(\"Best Score:\",study.best_value)\n",
        "print(\"Best trial\",study.best_trial.params)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kg8mzZ_DsA-E",
        "outputId": "0a396e25-75d0-4570-ba96-157e1c953a1d"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:22:32,998]\u001b[0m A new study created in memory with name: cat_parameter_opt\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 6.8776715\ttest: 6.8776735\ttest1: 6.2457656\tbest: 6.2457656 (0)\ttotal: 117ms\tremaining: 7m 23s\n",
            "100:\tlearn: 6.7769129\ttest: 6.7734051\ttest1: 6.1349919\tbest: 6.1349919 (100)\ttotal: 20.4s\tremaining: 12m 26s\n",
            "200:\tlearn: 6.7313592\ttest: 6.7147020\ttest1: 6.0784655\tbest: 6.0784655 (198)\ttotal: 31.4s\tremaining: 9m 21s\n",
            "300:\tlearn: 6.6716326\ttest: 6.6739628\ttest1: 6.0391356\tbest: 6.0391356 (299)\ttotal: 48.7s\tremaining: 9m 25s\n",
            "400:\tlearn: 6.6046332\ttest: 6.6459805\ttest1: 6.0176485\tbest: 6.0175859 (398)\ttotal: 1m\tremaining: 8m 35s\n",
            "500:\tlearn: 6.5501921\ttest: 6.6068926\ttest1: 6.0057914\tbest: 6.0057914 (500)\ttotal: 1m 13s\tremaining: 8m 2s\n",
            "600:\tlearn: 6.4542138\ttest: 6.5171883\ttest1: 5.8988802\tbest: 5.8988802 (600)\ttotal: 1m 23s\tremaining: 7m 21s\n",
            "700:\tlearn: 6.2063766\ttest: 6.3671536\ttest1: 5.7723440\tbest: 5.7723440 (700)\ttotal: 1m 50s\tremaining: 8m 8s\n",
            "800:\tlearn: 5.7321197\ttest: 6.1574297\ttest1: 5.6811938\tbest: 5.6805674 (795)\ttotal: 2m 28s\tremaining: 9m 13s\n",
            "900:\tlearn: 5.4067909\ttest: 6.0049276\ttest1: 5.6397821\tbest: 5.6388096 (892)\ttotal: 2m 51s\tremaining: 9m 10s\n",
            "1000:\tlearn: 5.1665630\ttest: 5.8968327\ttest1: 5.5846124\tbest: 5.5845700 (992)\ttotal: 3m 15s\tremaining: 9m 6s\n",
            "1100:\tlearn: 5.0207532\ttest: 5.8612679\ttest1: 5.5745772\tbest: 5.5729888 (1077)\ttotal: 3m 40s\tremaining: 8m 59s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.572988834\n",
            "bestIteration = 1077\n",
            "\n",
            "Shrink model to first 1078 iterations.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:26:17,162]\u001b[0m Trial 0 finished with value: 5.572988834053673 and parameters: {'learning_rate': 0.018272261776066247, 'bagging_temperature': 63.512210106407046, 'n_estimators': 3794, 'max_depth': 11, 'random_strength': 15, 'colsample_bylevel': 0.49359671220172163, 'l2_leaf_reg': 1.7519275289243016e-06, 'min_child_samples': 88, 'max_bin': 380, 'od_type': 'IncToDec'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 6.9382202\ttest: 6.9379497\ttest1: 5.9459337\tbest: 5.9459337 (0)\ttotal: 92.2ms\tremaining: 2m 14s\n",
            "100:\tlearn: 6.8613031\ttest: 6.8566065\ttest1: 5.8722130\tbest: 5.8722130 (100)\ttotal: 4.42s\tremaining: 59.2s\n",
            "200:\tlearn: 6.8305313\ttest: 6.8195056\ttest1: 5.8551615\tbest: 5.8551615 (200)\ttotal: 8.65s\tremaining: 54s\n",
            "300:\tlearn: 6.5026546\ttest: 6.3872265\ttest1: 5.6513542\tbest: 5.6513542 (300)\ttotal: 14.5s\tremaining: 55.6s\n",
            "400:\tlearn: 6.3420574\ttest: 6.2567292\ttest1: 5.6016812\tbest: 5.6007948 (394)\ttotal: 22s\tremaining: 57.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:26:44,571]\u001b[0m Trial 1 finished with value: 5.587338631742674 and parameters: {'learning_rate': 0.04763628595029446, 'bagging_temperature': 21.368329072358772, 'n_estimators': 1455, 'max_depth': 6, 'random_strength': 18, 'colsample_bylevel': 0.5825453457757226, 'l2_leaf_reg': 1.5747445384650815e-05, 'min_child_samples': 46, 'max_bin': 287, 'od_type': 'IncToDec'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.587338632\n",
            "bestIteration = 429\n",
            "\n",
            "Shrink model to first 430 iterations.\n",
            "0:\tlearn: 6.2881273\ttest: 6.2888176\ttest1: 8.3593882\tbest: 8.3593882 (0)\ttotal: 1.16s\tremaining: 49m 14s\n",
            "100:\tlearn: 6.1756860\ttest: 6.2036214\ttest1: 8.2965389\tbest: 8.2965389 (100)\ttotal: 25.6s\tremaining: 10m 21s\n",
            "200:\tlearn: 6.0921965\ttest: 6.1652381\ttest1: 8.2700809\tbest: 8.2700809 (200)\ttotal: 53.8s\tremaining: 10m 28s\n",
            "300:\tlearn: 6.0507963\ttest: 6.1381032\ttest1: 8.2492920\tbest: 8.2492914 (296)\ttotal: 1m 15s\tremaining: 9m 26s\n",
            "400:\tlearn: 6.0026076\ttest: 6.1136653\ttest1: 8.2364512\tbest: 8.2364512 (400)\ttotal: 1m 46s\tremaining: 9m 29s\n",
            "500:\tlearn: 5.9246764\ttest: 6.0807556\ttest1: 8.2227588\tbest: 8.2227588 (500)\ttotal: 2m 15s\tremaining: 9m 13s\n",
            "600:\tlearn: 5.8664364\ttest: 6.0617465\ttest1: 8.2125282\tbest: 8.2124477 (598)\ttotal: 2m 52s\tremaining: 9m 19s\n",
            "700:\tlearn: 5.7092610\ttest: 6.0159555\ttest1: 8.1805544\tbest: 8.1802170 (689)\ttotal: 3m 38s\tremaining: 9m 36s\n",
            "800:\tlearn: 5.4004204\ttest: 5.9142785\ttest1: 8.1019581\tbest: 8.1016899 (787)\ttotal: 4m 43s\tremaining: 10m 20s\n",
            "900:\tlearn: 4.9256632\ttest: 5.8141796\ttest1: 8.0586677\tbest: 8.0586677 (900)\ttotal: 6m 36s\tremaining: 12m 7s\n",
            "1000:\tlearn: 4.5718035\ttest: 5.7173813\ttest1: 8.0186485\tbest: 8.0186485 (1000)\ttotal: 8m 31s\tremaining: 13m 12s\n",
            "1100:\tlearn: 4.2333753\ttest: 5.6503919\ttest1: 8.0023097\tbest: 8.0022275 (1093)\ttotal: 10m 29s\tremaining: 13m 49s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 8.000447887\n",
            "bestIteration = 1121\n",
            "\n",
            "Shrink model to first 1122 iterations.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:38:20,654]\u001b[0m Trial 2 finished with value: 8.000447886518396 and parameters: {'learning_rate': 0.016002960978292496, 'bagging_temperature': 0.2920433847181412, 'n_estimators': 2552, 'max_depth': 14, 'random_strength': 20, 'colsample_bylevel': 0.708540663048167, 'l2_leaf_reg': 1.7776512920172654e-05, 'min_child_samples': 9, 'max_bin': 382, 'od_type': 'IncToDec'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 6.7690871\ttest: 6.7692760\ttest1: 6.6911949\tbest: 6.6911949 (0)\ttotal: 105ms\tremaining: 7m 14s\n",
            "100:\tlearn: 6.5909721\ttest: 6.5016340\ttest1: 6.4991106\tbest: 6.4991106 (100)\ttotal: 7.32s\tremaining: 4m 52s\n",
            "200:\tlearn: 6.4353096\ttest: 6.3293281\ttest1: 6.4341136\tbest: 6.4341136 (200)\ttotal: 13.2s\tremaining: 4m 18s\n",
            "300:\tlearn: 6.0307421\ttest: 6.0111311\ttest1: 6.2887144\tbest: 6.2887144 (300)\ttotal: 22.2s\tremaining: 4m 42s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:38:47,682]\u001b[0m Trial 3 finished with value: 6.288087683132722 and parameters: {'learning_rate': 0.04605136717611768, 'bagging_temperature': 72.86653737491046, 'n_estimators': 4138, 'max_depth': 7, 'random_strength': 9, 'colsample_bylevel': 0.8105398159072941, 'l2_leaf_reg': 1.3210173287250643e-05, 'min_child_samples': 16, 'max_bin': 349, 'od_type': 'Iter'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 6.288087683\n",
            "bestIteration = 307\n",
            "\n",
            "Shrink model to first 308 iterations.\n",
            "0:\tlearn: 6.9869588\ttest: 6.9869891\ttest1: 5.7417124\tbest: 5.7417124 (0)\ttotal: 71.4ms\tremaining: 2m 15s\n",
            "100:\tlearn: 6.9355385\ttest: 6.9412128\ttest1: 5.7045982\tbest: 5.7045982 (97)\ttotal: 6.53s\tremaining: 1m 56s\n",
            "200:\tlearn: 6.9025193\ttest: 6.9144195\ttest1: 5.6830277\tbest: 5.6830277 (200)\ttotal: 13s\tremaining: 1m 49s\n",
            "300:\tlearn: 6.8803011\ttest: 6.8965735\ttest1: 5.6729297\tbest: 5.6729297 (300)\ttotal: 20.5s\tremaining: 1m 49s\n",
            "400:\tlearn: 6.8610045\ttest: 6.8837099\ttest1: 5.6662443\tbest: 5.6662167 (397)\ttotal: 27.9s\tremaining: 1m 44s\n",
            "500:\tlearn: 6.8503441\ttest: 6.8757784\ttest1: 5.6615748\tbest: 5.6615602 (498)\ttotal: 33.6s\tremaining: 1m 34s\n",
            "600:\tlearn: 6.8340144\ttest: 6.8647478\ttest1: 5.6553982\tbest: 5.6553982 (600)\ttotal: 40.8s\tremaining: 1m 28s\n",
            "700:\tlearn: 6.8107774\ttest: 6.8499476\ttest1: 5.6484608\tbest: 5.6484608 (700)\ttotal: 48.7s\tremaining: 1m 23s\n",
            "800:\tlearn: 6.7196340\ttest: 6.6864247\ttest1: 5.6408317\tbest: 5.6408317 (800)\ttotal: 56.4s\tremaining: 1m 17s\n",
            "900:\tlearn: 6.3314007\ttest: 6.3865950\ttest1: 5.6247687\tbest: 5.6247133 (899)\ttotal: 1m 9s\tremaining: 1m 16s\n",
            "1000:\tlearn: 5.8806361\ttest: 6.0769392\ttest1: 5.6078260\tbest: 5.6078260 (1000)\ttotal: 1m 26s\tremaining: 1m 18s\n",
            "1100:\tlearn: 5.6201872\ttest: 5.9924625\ttest1: 5.5945567\tbest: 5.5942083 (1099)\ttotal: 1m 45s\tremaining: 1m 16s\n",
            "1200:\tlearn: 5.4383513\ttest: 5.9599758\ttest1: 5.5915589\tbest: 5.5912772 (1192)\ttotal: 2m 4s\tremaining: 1m 12s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.59099596\n",
            "bestIteration = 1204\n",
            "\n",
            "Shrink model to first 1205 iterations.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:41:00,309]\u001b[0m Trial 4 finished with value: 5.590995960449446 and parameters: {'learning_rate': 0.015166293102182283, 'bagging_temperature': 4.467752817973908, 'n_estimators': 1903, 'max_depth': 10, 'random_strength': 55, 'colsample_bylevel': 0.5109126733153162, 'l2_leaf_reg': 2.9087842986659113e-05, 'min_child_samples': 79, 'max_bin': 482, 'od_type': 'IncToDec'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 6.9478932\ttest: 6.9480871\ttest1: 5.9197209\tbest: 5.9197209 (0)\ttotal: 57.4ms\tremaining: 1m 19s\n",
            "100:\tlearn: 6.8766302\ttest: 6.8799673\ttest1: 5.8607795\tbest: 5.8607795 (100)\ttotal: 3.1s\tremaining: 39.4s\n",
            "200:\tlearn: 6.8629627\ttest: 6.8656578\ttest1: 5.8521432\tbest: 5.8521432 (200)\ttotal: 5.91s\tremaining: 34.8s\n",
            "300:\tlearn: 6.7616393\ttest: 6.6906829\ttest1: 5.8095621\tbest: 5.8094943 (299)\ttotal: 9.04s\tremaining: 32.5s\n",
            "400:\tlearn: 6.6100779\ttest: 6.4280307\ttest1: 5.7671840\tbest: 5.7661603 (392)\ttotal: 13s\tremaining: 31.9s\n",
            "500:\tlearn: 6.5386606\ttest: 6.3064507\ttest1: 5.7629175\tbest: 5.7598485 (486)\ttotal: 17.2s\tremaining: 30.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:41:18,839]\u001b[0m Trial 5 finished with value: 5.759848521371798 and parameters: {'learning_rate': 0.04409226795827594, 'bagging_temperature': 0.022592797420156956, 'n_estimators': 1382, 'max_depth': 4, 'random_strength': 32, 'colsample_bylevel': 0.6332063738136893, 'l2_leaf_reg': 8.147757462899138e-06, 'min_child_samples': 84, 'max_bin': 307, 'od_type': 'Iter'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.759848521\n",
            "bestIteration = 486\n",
            "\n",
            "Shrink model to first 487 iterations.\n",
            "0:\tlearn: 6.9796543\ttest: 6.9805476\ttest1: 5.7697045\tbest: 5.7697045 (0)\ttotal: 161ms\tremaining: 2m 14s\n",
            "100:\tlearn: 6.9034467\ttest: 6.9414285\ttest1: 5.7379141\tbest: 5.7379141 (99)\ttotal: 40.3s\tremaining: 4m 52s\n",
            "200:\tlearn: 6.8634529\ttest: 6.9134369\ttest1: 5.7176377\tbest: 5.7176377 (200)\ttotal: 1m 20s\tremaining: 4m 12s\n",
            "300:\tlearn: 6.8144009\ttest: 6.8931710\ttest1: 5.7041735\tbest: 5.7041735 (300)\ttotal: 1m 54s\tremaining: 3m 22s\n",
            "400:\tlearn: 6.7754601\ttest: 6.8751992\ttest1: 5.6928837\tbest: 5.6928837 (399)\ttotal: 2m 37s\tremaining: 2m 50s\n",
            "500:\tlearn: 6.7119027\ttest: 6.8551211\ttest1: 5.6841674\tbest: 5.6841674 (500)\ttotal: 3m 32s\tremaining: 2m 21s\n",
            "600:\tlearn: 6.6584728\ttest: 6.8376583\ttest1: 5.6790145\tbest: 5.6790145 (600)\ttotal: 4m 41s\tremaining: 1m 49s\n",
            "700:\tlearn: 6.6199648\ttest: 6.8281737\ttest1: 5.6729190\tbest: 5.6729190 (700)\ttotal: 5m 27s\tremaining: 1m 2s\n",
            "800:\tlearn: 6.5528586\ttest: 6.8104109\ttest1: 5.6692117\tbest: 5.6692024 (793)\ttotal: 6m 22s\tremaining: 16.2s\n",
            "834:\tlearn: 6.5280080\ttest: 6.8037300\ttest1: 5.6672641\tbest: 5.6672641 (834)\ttotal: 6m 43s\tremaining: 0us\n",
            "\n",
            "bestTest = 5.667264068\n",
            "bestIteration = 834\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:48:03,863]\u001b[0m Trial 6 finished with value: 5.667264068011552 and parameters: {'learning_rate': 0.012545899554294089, 'bagging_temperature': 16.172900811143155, 'n_estimators': 835, 'max_depth': 16, 'random_strength': 77, 'colsample_bylevel': 0.5192294089205034, 'l2_leaf_reg': 1.7560829253683595e-07, 'min_child_samples': 83, 'max_bin': 412, 'od_type': 'Iter'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 6.8835798\ttest: 6.8837790\ttest1: 6.2166421\tbest: 6.2166421 (0)\ttotal: 2.03s\tremaining: 34m 35s\n",
            "100:\tlearn: 6.8186860\ttest: 6.8393799\ttest1: 6.1838402\tbest: 6.1838402 (100)\ttotal: 44.8s\tremaining: 6m 47s\n",
            "200:\tlearn: 6.7934206\ttest: 6.8147648\ttest1: 6.1660839\tbest: 6.1660839 (200)\ttotal: 1m 2s\tremaining: 4m 13s\n",
            "300:\tlearn: 6.7771147\ttest: 6.8008787\ttest1: 6.1564789\tbest: 6.1564784 (299)\ttotal: 1m 13s\tremaining: 2m 55s\n",
            "400:\tlearn: 6.7459948\ttest: 6.7804545\ttest1: 6.1452725\tbest: 6.1452725 (399)\ttotal: 1m 35s\tremaining: 2m 27s\n",
            "500:\tlearn: 6.7273236\ttest: 6.7653772\ttest1: 6.1389613\tbest: 6.1389613 (500)\ttotal: 2m\tremaining: 2m 5s\n",
            "600:\tlearn: 6.7035536\ttest: 6.7507211\ttest1: 6.1337718\tbest: 6.1337718 (600)\ttotal: 2m 27s\tremaining: 1m 43s\n",
            "700:\tlearn: 6.6864278\ttest: 6.7403431\ttest1: 6.1284038\tbest: 6.1284011 (698)\ttotal: 2m 55s\tremaining: 1m 20s\n",
            "800:\tlearn: 6.6575613\ttest: 6.7239013\ttest1: 6.1226981\tbest: 6.1226948 (798)\ttotal: 3m 37s\tremaining: 59.8s\n",
            "900:\tlearn: 6.6214944\ttest: 6.7035099\ttest1: 6.1187591\tbest: 6.1187591 (900)\ttotal: 4m 17s\tremaining: 34.3s\n",
            "1000:\tlearn: 6.5775160\ttest: 6.6826840\ttest1: 6.1136615\tbest: 6.1136498 (996)\ttotal: 5m\tremaining: 6.01s\n",
            "1020:\tlearn: 6.5592140\ttest: 6.6685033\ttest1: 6.1130751\tbest: 6.1130751 (1019)\ttotal: 5m 10s\tremaining: 0us\n",
            "\n",
            "bestTest = 6.113075115\n",
            "bestIteration = 1019\n",
            "\n",
            "Shrink model to first 1020 iterations.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:53:15,084]\u001b[0m Trial 7 finished with value: 6.113075115445304 and parameters: {'learning_rate': 0.011265617213006592, 'bagging_temperature': 0.27155819552829413, 'n_estimators': 1021, 'max_depth': 15, 'random_strength': 62, 'colsample_bylevel': 0.5985388149115896, 'l2_leaf_reg': 1.9161149250778487e-06, 'min_child_samples': 34, 'max_bin': 297, 'od_type': 'IncToDec'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 6.8654074\ttest: 6.8654457\ttest1: 6.3012240\tbest: 6.3012240 (0)\ttotal: 59ms\tremaining: 1m 1s\n",
            "100:\tlearn: 6.7726150\ttest: 6.7897636\ttest1: 6.2414818\tbest: 6.2414818 (99)\ttotal: 13.3s\tremaining: 2m 3s\n",
            "200:\tlearn: 6.7151113\ttest: 6.7573379\ttest1: 6.2243303\tbest: 6.2243203 (198)\ttotal: 29.5s\tremaining: 2m 2s\n",
            "300:\tlearn: 6.6184314\ttest: 6.6352952\ttest1: 6.1713798\tbest: 6.1713798 (300)\ttotal: 47.1s\tremaining: 1m 55s\n",
            "400:\tlearn: 5.0695696\ttest: 5.9016565\ttest1: 5.9554515\tbest: 5.9550420 (399)\ttotal: 1m 44s\tremaining: 2m 45s\n",
            "500:\tlearn: 4.3831419\ttest: 5.7149220\ttest1: 5.9267521\tbest: 5.9249090 (495)\ttotal: 2m 53s\tremaining: 3m 5s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.924908983\n",
            "bestIteration = 495\n",
            "\n",
            "Shrink model to first 496 iterations.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:56:29,733]\u001b[0m Trial 8 finished with value: 5.92490898292124 and parameters: {'learning_rate': 0.04169990777997927, 'bagging_temperature': 0.7742116473996251, 'n_estimators': 1038, 'max_depth': 13, 'random_strength': 76, 'colsample_bylevel': 0.7367663185416977, 'l2_leaf_reg': 2.3131305726837285e-05, 'min_child_samples': 52, 'max_bin': 357, 'od_type': 'IncToDec'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 6.8661247\ttest: 6.8660452\ttest1: 6.2918969\tbest: 6.2918969 (0)\ttotal: 159ms\tremaining: 8m 54s\n",
            "100:\tlearn: 6.8348113\ttest: 6.8380559\ttest1: 6.2659710\tbest: 6.2659710 (100)\ttotal: 5.36s\tremaining: 2m 53s\n",
            "200:\tlearn: 6.8096956\ttest: 6.8140313\ttest1: 6.2456414\tbest: 6.2456414 (200)\ttotal: 12.1s\tremaining: 3m 10s\n",
            "300:\tlearn: 6.7809017\ttest: 6.7957839\ttest1: 6.2315515\tbest: 6.2315509 (299)\ttotal: 19.4s\tremaining: 3m 17s\n",
            "400:\tlearn: 6.7515436\ttest: 6.7828256\ttest1: 6.2226875\tbest: 6.2226875 (400)\ttotal: 26.4s\tremaining: 3m 15s\n",
            "500:\tlearn: 6.7412771\ttest: 6.7745483\ttest1: 6.2170537\tbest: 6.2170537 (500)\ttotal: 33.4s\tremaining: 3m 11s\n",
            "600:\tlearn: 6.7308234\ttest: 6.7663926\ttest1: 6.2114944\tbest: 6.2114881 (597)\ttotal: 39.1s\tremaining: 2m 59s\n",
            "700:\tlearn: 6.7234443\ttest: 6.7604376\ttest1: 6.2084376\tbest: 6.2084376 (700)\ttotal: 45.3s\tremaining: 2m 52s\n",
            "800:\tlearn: 6.7124920\ttest: 6.7530449\ttest1: 6.2040987\tbest: 6.2040987 (800)\ttotal: 52.5s\tremaining: 2m 47s\n",
            "900:\tlearn: 6.6981803\ttest: 6.7456303\ttest1: 6.1994503\tbest: 6.1994420 (899)\ttotal: 59.5s\tremaining: 2m 42s\n",
            "1000:\tlearn: 6.6480410\ttest: 6.7083128\ttest1: 6.1796250\tbest: 6.1796250 (1000)\ttotal: 1m 6s\tremaining: 2m 37s\n",
            "1100:\tlearn: 6.3490156\ttest: 6.5435890\ttest1: 6.1225862\tbest: 6.1225862 (1100)\ttotal: 1m 17s\tremaining: 2m 38s\n",
            "1200:\tlearn: 6.0104356\ttest: 6.3540853\ttest1: 6.0559122\tbest: 6.0559122 (1200)\ttotal: 1m 30s\tremaining: 2m 42s\n",
            "1300:\tlearn: 5.8567281\ttest: 6.2651581\ttest1: 6.0209287\tbest: 6.0209287 (1300)\ttotal: 1m 44s\tremaining: 2m 45s\n",
            "1400:\tlearn: 5.7507810\ttest: 6.1934553\ttest1: 5.9988211\tbest: 5.9986448 (1395)\ttotal: 1m 58s\tremaining: 2m 45s\n",
            "1500:\tlearn: 5.6588622\ttest: 6.1544934\ttest1: 5.9855505\tbest: 5.9855505 (1500)\ttotal: 2m 12s\tremaining: 2m 44s\n",
            "1600:\tlearn: 5.6041615\ttest: 6.1235612\ttest1: 5.9759119\tbest: 5.9759119 (1600)\ttotal: 2m 27s\tremaining: 2m 41s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.975886213\n",
            "bestIteration = 1601\n",
            "\n",
            "Shrink model to first 1602 iterations.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[32m[I 2022-06-08 14:59:02,884]\u001b[0m Trial 9 finished with value: 5.975886212647699 and parameters: {'learning_rate': 0.011896326393433528, 'bagging_temperature': 0.0133572404119741, 'n_estimators': 3364, 'max_depth': 8, 'random_strength': 51, 'colsample_bylevel': 0.9445398843556558, 'l2_leaf_reg': 7.486273952174759e-06, 'min_child_samples': 44, 'max_bin': 427, 'od_type': 'IncToDec'}. Best is trial 0 with value: 5.572988834053673.\u001b[0m\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Score: 5.572988834053673\n",
            "Best trial {'learning_rate': 0.018272261776066247, 'bagging_temperature': 63.512210106407046, 'n_estimators': 3794, 'max_depth': 11, 'random_strength': 15, 'colsample_bylevel': 0.49359671220172163, 'l2_leaf_reg': 1.7519275289243016e-06, 'min_child_samples': 88, 'max_bin': 380, 'od_type': 'IncToDec'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n",
        "folds = []\n",
        "for train_idx, valid_idx in skf.split(train, train['counts']):\n",
        "  folds.append((train_idx,valid_idx))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yFE7GCcRsBAg",
        "outputId": "df81fdf9-cdac-4294-c459-567d1652bed3"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:672: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=10.\n",
            "  % (min_groups, self.n_splits)), UserWarning)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cat_param={'learning_rate': 0.018272261776066247, \n",
        "           'bagging_temperature': 63.512210106407046, \n",
        "           'n_estimators': 3794, \n",
        "           'max_depth': 11, \n",
        "           'random_strength': 15, \n",
        "           'colsample_bylevel': 0.49359671220172163, \n",
        "           'l2_leaf_reg': 1.7519275289243016e-06, \n",
        "           'min_child_samples': 88, \n",
        "           'max_bin': 380, \n",
        "           'od_type': 'IncToDec'\n",
        "           }"
      ],
      "metadata": {
        "id": "JTXP1rwS1U0V"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n",
        "folds = []\n",
        "for train_idx, valid_idx in skf.split(train, train['counts']):\n",
        "  folds.append((train_idx,valid_idx))\n",
        "\n",
        "random.seed(42)\n",
        "cat_models={}\n",
        "\n",
        "cat_features =range(X_test.shape[1])\n",
        "\n",
        "for fold in range(10):\n",
        "  print(f'===================================={fold+1}============================================')\n",
        "  train_idx, valid_idx = folds[fold]\n",
        "  X_train = train.drop(['counts'],axis=1).iloc[train_idx]\n",
        "  X_valid = train.drop(['counts'],axis=1).iloc[valid_idx]\n",
        "  y_train = train['counts'][train_idx].values\n",
        "  y_valid = train['counts'][valid_idx].values\n",
        "\n",
        "  cat = CatBoostRegressor(**cat_param)\n",
        "  cat.fit(X_train, y_train,\n",
        "          eval_set=[(X_train, y_train), (X_valid,y_valid)],\n",
        "          early_stopping_rounds=35,cat_features=cat_features,\n",
        "          verbose=100)\n",
        "  cat_models[fold] = cat\n",
        "  print(f'================================================================================\\n\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ozv52nyvsjqJ",
        "outputId": "3987b737-3948-4191-81a6-e3e8d12d527b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:672: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=10.\n",
            "  % (min_groups, self.n_splits)), UserWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "====================================1============================================\n",
            "0:\tlearn: 6.7660965\ttest: 6.7661151\ttest1: 6.6580843\tbest: 6.6580843 (0)\ttotal: 61.9ms\tremaining: 3m 54s\n",
            "100:\tlearn: 6.6828008\ttest: 6.6934803\ttest1: 6.5872703\tbest: 6.5872703 (98)\ttotal: 11s\tremaining: 6m 42s\n",
            "200:\tlearn: 6.6398570\ttest: 6.6592634\ttest1: 6.5581501\tbest: 6.5581501 (200)\ttotal: 28s\tremaining: 8m 20s\n",
            "300:\tlearn: 6.5947555\ttest: 6.6141258\ttest1: 6.5078209\tbest: 6.5077227 (293)\ttotal: 41.5s\tremaining: 8m 1s\n",
            "400:\tlearn: 6.5634820\ttest: 6.5898892\ttest1: 6.4941350\tbest: 6.4941350 (400)\ttotal: 51.7s\tremaining: 7m 17s\n",
            "500:\tlearn: 6.5158313\ttest: 6.5562072\ttest1: 6.4575850\tbest: 6.4575850 (500)\ttotal: 1m 1s\tremaining: 6m 44s\n",
            "600:\tlearn: 6.4135225\ttest: 6.4773999\ttest1: 6.3326353\tbest: 6.3326257 (599)\ttotal: 1m 16s\tremaining: 6m 49s\n",
            "700:\tlearn: 6.0780908\ttest: 6.3350115\ttest1: 6.1100102\tbest: 6.1100102 (700)\ttotal: 1m 51s\tremaining: 8m 12s\n",
            "800:\tlearn: 5.7121449\ttest: 6.2414659\ttest1: 6.0390228\tbest: 6.0388840 (792)\ttotal: 2m 35s\tremaining: 9m 40s\n",
            "900:\tlearn: 5.4079488\ttest: 6.1413687\ttest1: 5.9816622\tbest: 5.9813844 (898)\ttotal: 3m 4s\tremaining: 9m 52s\n",
            "1000:\tlearn: 5.1883221\ttest: 6.0957997\ttest1: 5.9576551\tbest: 5.9576551 (1000)\ttotal: 3m 29s\tremaining: 9m 45s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.945692666\n",
            "bestIteration = 1046\n",
            "\n",
            "Shrink model to first 1047 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================2============================================\n",
            "0:\tlearn: 6.6284411\ttest: 6.6284800\ttest1: 7.8055819\tbest: 7.8055819 (0)\ttotal: 60.6ms\tremaining: 3m 49s\n",
            "100:\tlearn: 6.5539500\ttest: 6.5587241\ttest1: 7.7395949\tbest: 7.7395949 (100)\ttotal: 8.18s\tremaining: 4m 59s\n",
            "200:\tlearn: 6.5050320\ttest: 6.5051057\ttest1: 7.6660921\tbest: 7.6660921 (200)\ttotal: 17.9s\tremaining: 5m 20s\n",
            "300:\tlearn: 6.4316205\ttest: 6.4220393\ttest1: 7.6068987\tbest: 7.6068987 (300)\ttotal: 27.4s\tremaining: 5m 18s\n",
            "400:\tlearn: 6.3992096\ttest: 6.3977580\ttest1: 7.5859614\tbest: 7.5859487 (398)\ttotal: 37.2s\tremaining: 5m 14s\n",
            "500:\tlearn: 6.3552011\ttest: 6.3631910\ttest1: 7.5671179\tbest: 7.5671179 (500)\ttotal: 47.4s\tremaining: 5m 11s\n",
            "600:\tlearn: 6.2375040\ttest: 6.2509012\ttest1: 7.3575954\tbest: 7.3575954 (600)\ttotal: 58s\tremaining: 5m 8s\n",
            "700:\tlearn: 5.8878855\ttest: 6.0490643\ttest1: 7.2174667\tbest: 7.2174667 (700)\ttotal: 1m 14s\tremaining: 5m 26s\n",
            "800:\tlearn: 5.5172870\ttest: 5.8421451\ttest1: 6.9120604\tbest: 6.9120604 (800)\ttotal: 1m 38s\tremaining: 6m 6s\n",
            "900:\tlearn: 5.2797081\ttest: 5.7609212\ttest1: 6.6941324\tbest: 6.6938736 (899)\ttotal: 2m 4s\tremaining: 6m 39s\n",
            "1000:\tlearn: 5.0924974\ttest: 5.7208072\ttest1: 6.6124665\tbest: 6.6124665 (1000)\ttotal: 2m 30s\tremaining: 6m 59s\n",
            "1100:\tlearn: 4.9629337\ttest: 5.6928571\ttest1: 6.5817748\tbest: 6.5817748 (1100)\ttotal: 2m 56s\tremaining: 7m 10s\n",
            "1200:\tlearn: 4.8176354\ttest: 5.6665244\ttest1: 6.5612323\tbest: 6.5612323 (1200)\ttotal: 3m 21s\tremaining: 7m 15s\n",
            "1300:\tlearn: 4.6894402\ttest: 5.6382857\ttest1: 6.5442474\tbest: 6.5442474 (1300)\ttotal: 3m 46s\tremaining: 7m 14s\n",
            "1400:\tlearn: 4.5774391\ttest: 5.6172594\ttest1: 6.5353578\tbest: 6.5348347 (1396)\ttotal: 4m 12s\tremaining: 7m 11s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 6.534834683\n",
            "bestIteration = 1396\n",
            "\n",
            "Shrink model to first 1397 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================3============================================\n",
            "0:\tlearn: 6.7336479\ttest: 6.7336651\ttest1: 6.9483867\tbest: 6.9483867 (0)\ttotal: 61.4ms\tremaining: 3m 52s\n",
            "100:\tlearn: 6.6330555\ttest: 6.6491608\ttest1: 6.8871667\tbest: 6.8871667 (100)\ttotal: 10.9s\tremaining: 6m 37s\n",
            "200:\tlearn: 6.5692689\ttest: 6.5742811\ttest1: 6.8678362\tbest: 6.8678362 (200)\ttotal: 21s\tremaining: 6m 14s\n",
            "300:\tlearn: 6.4889303\ttest: 6.4975331\ttest1: 6.8568398\tbest: 6.8568398 (300)\ttotal: 30.5s\tremaining: 5m 54s\n",
            "400:\tlearn: 6.4312914\ttest: 6.4597144\ttest1: 6.8521693\tbest: 6.8521693 (400)\ttotal: 40.1s\tremaining: 5m 39s\n",
            "500:\tlearn: 6.3725082\ttest: 6.4161625\ttest1: 6.8458452\tbest: 6.8458452 (500)\ttotal: 51.4s\tremaining: 5m 38s\n",
            "600:\tlearn: 6.2299448\ttest: 6.3266085\ttest1: 6.8337492\tbest: 6.8337492 (600)\ttotal: 1m 3s\tremaining: 5m 39s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 6.8319196\n",
            "bestIteration = 611\n",
            "\n",
            "Shrink model to first 612 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================4============================================\n",
            "0:\tlearn: 6.8660476\ttest: 6.8660952\ttest1: 5.6631091\tbest: 5.6631091 (0)\ttotal: 60.3ms\tremaining: 3m 48s\n",
            "100:\tlearn: 6.7341763\ttest: 6.7677648\ttest1: 5.5954611\tbest: 5.5954611 (100)\ttotal: 11.3s\tremaining: 6m 53s\n",
            "200:\tlearn: 6.6944416\ttest: 6.7368128\ttest1: 5.5777236\tbest: 5.5776062 (196)\ttotal: 22.5s\tremaining: 6m 41s\n",
            "300:\tlearn: 6.6456764\ttest: 6.6581090\ttest1: 5.5673445\tbest: 5.5673445 (300)\ttotal: 32.9s\tremaining: 6m 21s\n",
            "400:\tlearn: 6.6063112\ttest: 6.6262532\ttest1: 5.5590045\tbest: 5.5590035 (399)\ttotal: 43.5s\tremaining: 6m 7s\n",
            "500:\tlearn: 6.5509705\ttest: 6.5857888\ttest1: 5.5557220\tbest: 5.5557220 (499)\ttotal: 53.5s\tremaining: 5m 51s\n",
            "600:\tlearn: 6.4380906\ttest: 6.4593490\ttest1: 5.5478869\tbest: 5.5478869 (600)\ttotal: 1m 4s\tremaining: 5m 45s\n",
            "700:\tlearn: 6.1373460\ttest: 6.2249791\ttest1: 5.5356827\tbest: 5.5355161 (693)\ttotal: 1m 22s\tremaining: 6m 2s\n",
            "800:\tlearn: 5.7639834\ttest: 6.0581311\ttest1: 5.5262386\tbest: 5.5261899 (799)\ttotal: 1m 46s\tremaining: 6m 36s\n",
            "900:\tlearn: 5.4853721\ttest: 5.9615333\ttest1: 5.5102239\tbest: 5.5099297 (896)\ttotal: 2m 12s\tremaining: 7m 4s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.508208493\n",
            "bestIteration = 908\n",
            "\n",
            "Shrink model to first 909 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================5============================================\n",
            "0:\tlearn: 6.7394378\ttest: 6.7394378\ttest1: 6.9068752\tbest: 6.9068752 (0)\ttotal: 10.6ms\tremaining: 40.4s\n",
            "100:\tlearn: 6.6395174\ttest: 6.6548794\ttest1: 6.8421410\tbest: 6.8421410 (100)\ttotal: 10.9s\tremaining: 6m 38s\n",
            "200:\tlearn: 6.5778235\ttest: 6.6212540\ttest1: 6.8177687\tbest: 6.8177543 (198)\ttotal: 20.3s\tremaining: 6m 3s\n",
            "300:\tlearn: 6.5379162\ttest: 6.5988963\ttest1: 6.8046411\tbest: 6.8046411 (299)\ttotal: 30.2s\tremaining: 5m 50s\n",
            "400:\tlearn: 6.5173693\ttest: 6.5852259\ttest1: 6.7964357\tbest: 6.7964355 (392)\ttotal: 39.1s\tremaining: 5m 30s\n",
            "500:\tlearn: 6.4431300\ttest: 6.5632449\ttest1: 6.7745097\tbest: 6.7744687 (499)\ttotal: 49.1s\tremaining: 5m 22s\n",
            "600:\tlearn: 6.3910147\ttest: 6.5430013\ttest1: 6.7586335\tbest: 6.7585009 (598)\ttotal: 59.3s\tremaining: 5m 14s\n",
            "700:\tlearn: 6.1448550\ttest: 6.4532474\ttest1: 6.6306598\tbest: 6.6306598 (700)\ttotal: 1m 18s\tremaining: 5m 44s\n",
            "800:\tlearn: 5.7545398\ttest: 6.2850271\ttest1: 6.5348009\tbest: 6.5340722 (793)\ttotal: 1m 42s\tremaining: 6m 21s\n",
            "900:\tlearn: 5.4520000\ttest: 6.1779342\ttest1: 6.4146460\tbest: 6.4130478 (884)\ttotal: 2m 7s\tremaining: 6m 48s\n",
            "1000:\tlearn: 5.2614488\ttest: 6.1289211\ttest1: 6.3833561\tbest: 6.3827831 (993)\ttotal: 2m 32s\tremaining: 7m 4s\n",
            "1100:\tlearn: 5.1143602\ttest: 6.0921691\ttest1: 6.3497205\tbest: 6.3497085 (1095)\ttotal: 2m 57s\tremaining: 7m 14s\n",
            "1200:\tlearn: 4.9191048\ttest: 6.0387688\ttest1: 6.3244374\tbest: 6.3224370 (1192)\ttotal: 3m 22s\tremaining: 7m 17s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 6.32243696\n",
            "bestIteration = 1192\n",
            "\n",
            "Shrink model to first 1193 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================6============================================\n",
            "0:\tlearn: 6.8107163\ttest: 6.8107163\ttest1: 6.2458966\tbest: 6.2458966 (0)\ttotal: 9.75ms\tremaining: 37s\n",
            "100:\tlearn: 6.7195533\ttest: 6.7038872\ttest1: 6.1996393\tbest: 6.1996393 (100)\ttotal: 9.96s\tremaining: 6m 4s\n",
            "200:\tlearn: 6.6769053\ttest: 6.6713517\ttest1: 6.1845834\tbest: 6.1845834 (200)\ttotal: 18.7s\tremaining: 5m 34s\n",
            "300:\tlearn: 6.5950609\ttest: 6.5681210\ttest1: 6.1780484\tbest: 6.1780317 (296)\ttotal: 27.8s\tremaining: 5m 22s\n",
            "400:\tlearn: 6.5493623\ttest: 6.5111890\ttest1: 6.1732099\tbest: 6.1731489 (394)\ttotal: 36.8s\tremaining: 5m 11s\n",
            "500:\tlearn: 6.5167031\ttest: 6.4732882\ttest1: 6.1675647\tbest: 6.1675647 (500)\ttotal: 44.6s\tremaining: 4m 52s\n",
            "600:\tlearn: 6.3786233\ttest: 6.3593172\ttest1: 6.1555701\tbest: 6.1554710 (598)\ttotal: 55.9s\tremaining: 4m 57s\n",
            "700:\tlearn: 5.9751353\ttest: 6.1282308\ttest1: 6.1373855\tbest: 6.1373221 (699)\ttotal: 1m 15s\tremaining: 5m 33s\n",
            "800:\tlearn: 5.5579654\ttest: 5.9124728\ttest1: 6.1267277\tbest: 6.1267277 (800)\ttotal: 1m 40s\tremaining: 6m 15s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 6.119629623\n",
            "bestIteration = 837\n",
            "\n",
            "Shrink model to first 838 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================7============================================\n",
            "0:\tlearn: 6.3773434\ttest: 6.3773434\ttest1: 9.5109287\tbest: 9.5109287 (0)\ttotal: 9.14ms\tremaining: 34.7s\n",
            "100:\tlearn: 6.2941530\ttest: 6.3010943\ttest1: 9.4544382\tbest: 9.4544382 (100)\ttotal: 10.4s\tremaining: 6m 20s\n",
            "200:\tlearn: 6.2463919\ttest: 6.2631122\ttest1: 9.4316033\tbest: 9.4316033 (200)\ttotal: 20.6s\tremaining: 6m 8s\n",
            "300:\tlearn: 6.2008884\ttest: 6.2360867\ttest1: 9.4162743\tbest: 9.4162743 (300)\ttotal: 31.2s\tremaining: 6m 2s\n",
            "400:\tlearn: 6.1746627\ttest: 6.2160574\ttest1: 9.4079010\tbest: 9.4079010 (400)\ttotal: 40.1s\tremaining: 5m 39s\n",
            "500:\tlearn: 6.1210080\ttest: 6.1826318\ttest1: 9.3654546\tbest: 9.3654545 (497)\ttotal: 50.8s\tremaining: 5m 33s\n",
            "600:\tlearn: 6.0482036\ttest: 6.1182212\ttest1: 9.3324387\tbest: 9.3324387 (600)\ttotal: 1m 2s\tremaining: 5m 29s\n",
            "700:\tlearn: 5.8156697\ttest: 5.9244336\ttest1: 9.2136113\tbest: 9.2135783 (699)\ttotal: 1m 20s\tremaining: 5m 54s\n",
            "800:\tlearn: 5.5132103\ttest: 5.7563136\ttest1: 9.0900577\tbest: 9.0899573 (791)\ttotal: 1m 44s\tremaining: 6m 32s\n",
            "900:\tlearn: 5.3148659\ttest: 5.6708994\ttest1: 9.0624375\tbest: 9.0618479 (895)\ttotal: 2m 10s\tremaining: 6m 58s\n",
            "1000:\tlearn: 5.1154684\ttest: 5.5954743\ttest1: 8.9918624\tbest: 8.9918466 (997)\ttotal: 2m 36s\tremaining: 7m 15s\n",
            "1100:\tlearn: 4.9405492\ttest: 5.5385913\ttest1: 8.9673845\tbest: 8.9673845 (1100)\ttotal: 3m 1s\tremaining: 7m 24s\n",
            "1200:\tlearn: 4.7970168\ttest: 5.4986735\ttest1: 8.9472490\tbest: 8.9465490 (1199)\ttotal: 3m 27s\tremaining: 7m 27s\n",
            "1300:\tlearn: 4.6533954\ttest: 5.4564066\ttest1: 8.9274988\tbest: 8.9274988 (1300)\ttotal: 3m 52s\tremaining: 7m 25s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 8.924513979\n",
            "bestIteration = 1323\n",
            "\n",
            "Shrink model to first 1324 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================8============================================\n",
            "0:\tlearn: 6.8939355\ttest: 6.8939355\ttest1: 5.3615038\tbest: 5.3615038 (0)\ttotal: 10.9ms\tremaining: 41.2s\n",
            "100:\tlearn: 6.7902919\ttest: 6.7974044\ttest1: 5.2782698\tbest: 5.2782698 (100)\ttotal: 10.5s\tremaining: 6m 24s\n",
            "200:\tlearn: 6.7276153\ttest: 6.7300117\ttest1: 5.2438120\tbest: 5.2436548 (195)\ttotal: 19.3s\tremaining: 5m 44s\n",
            "300:\tlearn: 6.6371934\ttest: 6.6386583\ttest1: 5.2040074\tbest: 5.2040074 (300)\ttotal: 29.7s\tremaining: 5m 44s\n",
            "400:\tlearn: 6.5396712\ttest: 6.5234762\ttest1: 5.1467362\tbest: 5.1467362 (400)\ttotal: 40.7s\tremaining: 5m 44s\n",
            "500:\tlearn: 6.4854304\ttest: 6.4896587\ttest1: 5.1375476\tbest: 5.1375476 (500)\ttotal: 50.9s\tremaining: 5m 34s\n",
            "600:\tlearn: 6.3135085\ttest: 6.3381559\ttest1: 5.0965680\tbest: 5.0965680 (600)\ttotal: 1m 5s\tremaining: 5m 45s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.090024587\n",
            "bestIteration = 634\n",
            "\n",
            "Shrink model to first 635 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================9============================================\n",
            "0:\tlearn: 6.8900115\ttest: 6.8900115\ttest1: 5.4067558\tbest: 5.4067558 (0)\ttotal: 9.43ms\tremaining: 35.8s\n",
            "100:\tlearn: 6.7870924\ttest: 6.8009479\ttest1: 5.3355658\tbest: 5.3355658 (98)\ttotal: 9.4s\tremaining: 5m 43s\n",
            "200:\tlearn: 6.7340914\ttest: 6.7572851\ttest1: 5.3177252\tbest: 5.3177098 (198)\ttotal: 19.2s\tremaining: 5m 42s\n",
            "300:\tlearn: 6.6970922\ttest: 6.7192858\ttest1: 5.3104401\tbest: 5.3104121 (298)\ttotal: 28.1s\tremaining: 5m 25s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.307374829\n",
            "bestIteration = 339\n",
            "\n",
            "Shrink model to first 340 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n",
            "====================================10============================================\n",
            "0:\tlearn: 6.8378136\ttest: 6.8378136\ttest1: 5.9734641\tbest: 5.9734641 (0)\ttotal: 10.4ms\tremaining: 39.5s\n",
            "100:\tlearn: 6.7128948\ttest: 6.7195542\ttest1: 5.8515397\tbest: 5.8515397 (100)\ttotal: 13s\tremaining: 7m 54s\n",
            "200:\tlearn: 6.6654812\ttest: 6.6828066\ttest1: 5.8182890\tbest: 5.8182890 (199)\ttotal: 24.3s\tremaining: 7m 14s\n",
            "300:\tlearn: 6.6389396\ttest: 6.6669262\ttest1: 5.8058628\tbest: 5.8058593 (296)\ttotal: 33.4s\tremaining: 6m 27s\n",
            "400:\tlearn: 6.6113818\ttest: 6.6423155\ttest1: 5.7802651\tbest: 5.7802651 (398)\ttotal: 41.9s\tremaining: 5m 54s\n",
            "500:\tlearn: 6.5700282\ttest: 6.6174854\ttest1: 5.7623112\tbest: 5.7622512 (495)\ttotal: 53s\tremaining: 5m 48s\n",
            "600:\tlearn: 6.4873783\ttest: 6.5485709\ttest1: 5.6943939\tbest: 5.6943939 (600)\ttotal: 1m 3s\tremaining: 5m 37s\n",
            "700:\tlearn: 6.0862473\ttest: 6.3583642\ttest1: 5.5740924\tbest: 5.5740924 (700)\ttotal: 1m 20s\tremaining: 5m 56s\n",
            "800:\tlearn: 5.7172166\ttest: 6.2167005\ttest1: 5.4882447\tbest: 5.4881964 (799)\ttotal: 1m 44s\tremaining: 6m 32s\n",
            "900:\tlearn: 5.3878496\ttest: 6.0814099\ttest1: 5.4397751\tbest: 5.4395618 (885)\ttotal: 2m 10s\tremaining: 6m 57s\n",
            "1000:\tlearn: 5.1420696\ttest: 5.9862072\ttest1: 5.4001859\tbest: 5.4001859 (1000)\ttotal: 2m 35s\tremaining: 7m 12s\n",
            "1100:\tlearn: 4.9695403\ttest: 5.9449323\ttest1: 5.3830375\tbest: 5.3814550 (1080)\ttotal: 3m\tremaining: 7m 21s\n",
            "1200:\tlearn: 4.8142618\ttest: 5.9000842\ttest1: 5.3571726\tbest: 5.3570559 (1188)\ttotal: 3m 25s\tremaining: 7m 22s\n",
            "Stopped by overfitting detector  (35 iterations wait)\n",
            "\n",
            "bestTest = 5.353223194\n",
            "bestIteration = 1217\n",
            "\n",
            "Shrink model to first 1218 iterations.\n",
            "================================================================================\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "submission = pd.read_csv('/content/eng_sample.csv')"
      ],
      "metadata": {
        "id": "g_ZdMgm2swZP"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission.loc[:,'counts']=0\n",
        "for fold in range(10):\n",
        "  submission.loc[:,'counts'] += cat_models[fold].predict(test)/10"
      ],
      "metadata": {
        "id": "S-vA3AOBsoHa"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission.loc[submission.counts>30,'counts']=submission.loc[submission.counts>30,'counts']*4.8\n"
      ],
      "metadata": {
        "id": "h4aOr9ghsoJn"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission.columns = ['index','counts']\n",
        "submission.rename(columns = {'index':'index', 'counts':'운송장_건수'},inplace=True)"
      ],
      "metadata": {
        "id": "lS8oIPH91gu1"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "submission"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "eRtsVgvH7vjW",
        "outputId": "555aac4e-1595-4f40-97d2-a36625ee873d"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      index    운송장_건수\n",
              "0         0  5.924690\n",
              "1         1  5.313096\n",
              "2         2  6.024691\n",
              "3         3  5.051904\n",
              "4         4  4.597736\n",
              "...     ...       ...\n",
              "7915   7915  5.215205\n",
              "7916   7916  5.953002\n",
              "7917   7917  3.563447\n",
              "7918   7918  3.628671\n",
              "7919   7919  4.927029\n",
              "\n",
              "[7920 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae29bbfa-ee93-4518-bc75-0fc0f88bef57\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>운송장_건수</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>5.924690</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>5.313096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>6.024691</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>5.051904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>4.597736</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7915</th>\n",
              "      <td>7915</td>\n",
              "      <td>5.215205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7916</th>\n",
              "      <td>7916</td>\n",
              "      <td>5.953002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7917</th>\n",
              "      <td>7917</td>\n",
              "      <td>3.563447</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7918</th>\n",
              "      <td>7918</td>\n",
              "      <td>3.628671</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7919</th>\n",
              "      <td>7919</td>\n",
              "      <td>4.927029</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7920 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae29bbfa-ee93-4518-bc75-0fc0f88bef57')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ae29bbfa-ee93-4518-bc75-0fc0f88bef57 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ae29bbfa-ee93-4518-bc75-0fc0f88bef57');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "submission.to_csv('./마지막 확인용.csv',index = False)"
      ],
      "metadata": {
        "id": "K-rUQWUD1gxX"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "zua3iZnI7rk3"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}